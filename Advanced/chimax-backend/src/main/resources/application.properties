spring.application.name=chimax-backend

# MySQL Veritabanı Bağlantı Ayarları
spring.datasource.url=jdbc:mysql://localhost:3306/chimax_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=admin
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA ve Hibernate Ayarları
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# spring.jpa.properties.hibernate.format_sql=true # Opsiyonel: SQL loglarını daha okunabilir formatlar

# ===================================================================
# JWT (JSON Web Token) Ayarları
# ===================================================================
# ÖNEMLİ: Bu gizli anahtarı (secret key) GÜVENLİ ve TAHMİN EDİLEMEZ bir değerle değiştirin!
# Bu anahtar, JWT'lerin imzalanması ve doğrulanması için kullanılır.
# Güçlü bir anahtar oluşturmak için bir parola üretici kullanabilirsiniz.
# Production ortamında bu değeri environment variable veya bir secrets manager ile yönetin.
app.jwt.secret=VmVyeVNlY3JldEtleUZvckpXVEF1dGhlbnRpY2F0aW9uQW5kQXV0aG9yaXphdGlvblNhbXBsZTEyMw==

# Token geçerlilik süresi (milisaniye cinsinden). Örnek: 7 gün (604800000 ms)
app.jwt.expiration-ms=604800000 

# ===================================================================
# STRIPE AYARLARI (Eğer kullanılıyorsa)
# ===================================================================
# ÖNEMLİ: Kendi Stripe SECRET Test anahtarınızı buraya yapıştırın!
# Bu anahtarı ASLA public repolara commit etmeyin. 
# Production için environment variable veya bir secrets manager kullanın.
stripe.secret.key=sk_test_51RLSbJ4FTNpFSwUW210go0ayNBnwGlf05lW5k7KUdIWT6Xj5TP4NaOlE0Fr5OKkDXDo6h169vb0ZLu4C0bqOrIhB00r6Deb6aw

# ===================================================================
# LOGLAMA AYARLARI
# ===================================================================
# Spring Security log seviyesi (DEBUG, TRACE daha detaylı bilgi verir)
logging.level.org.springframework.security=DEBUG
# Kendi güvenlik sınıflarınız için log seviyesi
logging.level.com.chimax.chimax_backend.security=

# ===================================================================
# DOSYA YÜKLEME (Multipart) AYARLARI
# ===================================================================
# Multipart yüklemelerini etkinleştir
spring.servlet.multipart.enabled=true

# Tek bir dosyanın maksimum boyutu (örneğin, 10MB)
spring.servlet.multipart.max-file-size=10MB

# Bir HTTP isteğindeki tüm dosyaların toplam maksimum boyutu
spring.servlet.multipart.max-request-size=10MB

# İsteğe bağlı: Dosyaların diske yazılmadan önce bellekte tutulacağı eşik değeri
# spring.servlet.multipart.file-size-threshold=2KB

# İsteğe bağlı: Yüklenen dosyaların geçici olarak saklanacağı konum
# Eğer belirtilmezse, sunucunun varsayılan geçici dizini kullanılır.
# Bu, büyük dosyalar için önemli olabilir ve sunucu yapılandırmasına göre ayarlanmalıdır.
# spring.servlet.multipart.location=/tmp/chimax-uploads 

# ===================================================================
# ÖZEL DOSYA SAKLAMA YOLU (FileStorageService için)
# ===================================================================
# Yüklenen ürün resimlerinin saklanacağı ana dizin.
# Bu property, FileStorageService'te @Value("${file.upload-dir}") ile okunacaktır.
# ÖNEMLİ: Bu dizinin sunucu tarafından YAZILABİLİR olduğundan emin olun.
# Uygulamanızın çalıştığı dizine göre göreceli bir yol veya mutlak bir yol kullanabilirsiniz.
# Örnek: Proje kök dizininde 'uploads/product-images' adında bir klasör oluşturmanız gerekebilir.
# Windows için: file.upload-dir=C:/chimax_uploads/product-images
# UNIX benzeri sistemler için: file.upload-dir=/var/chimax_uploads/product-images
# Veya proje kök dizinine göre:
file.upload-dir=./uploads/product-images
